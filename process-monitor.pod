=head1 NAME

process-monitor - run a child process and restart it when it exits.

=head1 SYNOPSIS

B<process-monitor> I<[options]> B<[--]> I<child [child_args...]>

=head1 DESCRIPTION

B<process-monitor> runs another program as a child process.  The child process
will be restarted when it exits, with delays to prevent continuous restarting.
Appropriate signals are passed to the child.

I<child> is a path to an executable.  I<child_args> are any number of arguments
that will be passed to the child.

I<--> is required if any of I<child_args> begins with 'I<->' due to option
processing.  (Although this depends on the getopt(3) library function in use --
GNU getopt does option reordering in argv[] by default, but other getopt
libraries may not do so and may stop immediately I<--> is encountered.  It's
probably better to always include I<-->.)

=head1 OPTIONS

=over

=item -D I<dirname>

=item --dir I<dirname>

Run the child process with its current directory set to I<dirname>.
B<process-monitor> itself still runs with its current directory unchanged, or
set to F</> if running as a daemon.

=item -d

=item --daemon

Go into the background before running I<child>.  This changes the handling of
SIGHUP and SIGINT - see the SIGNAL HANDLING section.

=item -C

=item --clear-env

Clear the environment before setting any variables specified by -E.

=item -E NAME=VALUE

=item --env NAME=VALUE

Pass this environment variable to the child process.  To unset a variable, omit
the '=VALUE'.

=item -e I<emailaddress>

=item --email I<emailaddress>

Send email to I<emailaddress> when restarting I<child>.  (Not implemented.)

=item -L I<name>

=item --child-log-name I<name>

Use I<name> in messages from the child process.  Defaults to the last path
component of I<child>.

=item -l I<name>

=item --log-name I<name>

Use I<name> in messages from B<process-monitor>.  Defaults to the last path
component of the name that was used to start B<process-monitor>, which in most
cases will be "process-monitor".  Changing this enables messages from different
B<process-monitor> processes to be distinguished in syslog.

=item -M I<time>

=item --max-wait-time I<time>

Specify the maximum time to wait between child restarts as I<time>, in seconds.

=item -m I<time>

=item --min-wait-time I<time>

Specify the minimum time to wait between child restarts as I<time>, in seconds.
B<process-monitor> will always wait at least one second between restarts.

The wait time starts at I<time>, and doubles for each start, up to the maximum
specified with I<-M>.

=item -p I<pidfile>

=item --pid-file I<pidfile>

Make B<process-monitor> write its PID to F<pidfile>.  If running as a daemon,
F<pidfile> will be written after going into the background.

If I<pidfile> cannot be written to, B<process-monitor> will exit.

I<pidfile> is deleted automatically when B<process-monitor> exits.

=item -u I<user>

=item --user I<user>

Run the child as I<user>, which can be a name or uid.  A group can be specified
with I<user>C<:>I<group>, or only a group can be specified with C<:>I<group>.
Normally only the superuser will be able to set the uid and gid, although other
users will be able to set gid if they are members of that group.

=item -V

=item --version

Print the B<process-monitor> version and exit.

=back

=head1 SIGNAL HANDLING

=over

=item SIGTERM

SIGTERM is handled by the parent, and immediately sent to the child when it
happens.  After sending this signal, the child is not restarted again, and
B<process-monitor> exits the next time that the child exits.

=item SIGINT and SIGHUP

SIGHUP is commonly used by daemons to tell them to re-read configuration, so
when running as a daemon, we pass SIGHUP to the child and do nothing else.

When not running as a daemon, we pass SIGHUP to the child and then exit when
the child does.

SIGINT is handled in the same way as SIGHUP.

When running as a daemon, neither of these signals change the future behaviour
of B<process-monitor> in reaction to the child exiting.

=item SIGUSR1

SIGUSR1 tells B<process-monitor> to stop monitoring the child process.  After
this signal, the child process will not be restarted if it exits.

=item SIGUSR2

SIGUSR2 tells B<process-monitor> to begin monitoring the child process.  If the
child is still running, B<process-monitor> does nothing.  If it is not running,
it is restarted.

=item SIGCHLD

SIGCHLD is handled for child process management

=item SIGALRM

SIGALRM is used for child process restart timeouts.

=back

=head1 CONFIGURATION FILE

Needs one?

=head1 EXAMPLES

=over

=item Run a daemon

The daemon program is called "fred".  We want to run it as user "freduser" with
group "fredgroup", and save the pid of the monitor program in
F</var/run/fred.pid>.  We want the output of fred to appear in syslog with the
prefix "Fred", and the B<process-monitor> output to appear in syslog with the
prefix "Fred supervisor".  B<process-monitor> should wait no more than 20
seconds after restarting fred each time it exits.

 process-monitor -u freduser:fredgroup \
                 -p /var/run/fred.pid \
                 -L Fred \
                 -l "Fred supervisor" \
                 -M 20 \
            -- /usr/local/bin/fred

=item Send a signal to the daemon

We can send a SIGHUP to the fred program by sending SIGHUP to the
B<process-monitor> process:

 kill -HUP `cat /var/run/fred.pid`

=item Make the daemon exit

Assuming that the fred program will exit on SIGTERM, we can make it do so by
sending SIGTERM to the correct B<process-monitor> process:

 kill -TERM `cat /var/run/fred.pid`

B<process-monitor> also exits after fred does.

=item Stop monitoring fred, then stop fred.

 kill -USR1 `cat /var/run/fred.pid`
 kill -INT `cat /var/run/fred.pid`

This will leave B<process-monitor> running, but if fred exits on SIGINT, it
will not be restarted.

=item Start monitoring fred again

 kill -USR2 `cat /var/run/fred.pid`

This will make B<process-monitor> monitor fred again, and if fred has exited,
it will be restarted.

=back

=head1 BUGS

Probably.

=head1 AUTHOR

Russell Steicke <russells@adelie.cx>

=head1 COPYRIGHT

Copyright (C) 2010 Russell Steicke.  Released under the terms of the GNU
General Public License, but dedicated to the public domain at the beginning of
the tenth calendar year after publishing (ie the start of 2020 for version 0.1).

This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

=head1 VERSION

0.1

=head1 SEE ALSO

init(8), upstart(8).

=cut

NOTE: when this is updated, I will need to update the html man page on github:

  git checkout gh-pages
  ./make-man
  git add process-monitor.1.html
  git commit -s -m "Man page updated."
  git push github-pages
